import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator,
  Image,
  SafeAreaView,
  StatusBar,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons'; // You'll need to install expo-vector-icons
import axios from 'axios';
import Header from '@/components/ui/Header';

// Message types
type MessageType = {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
};

// Set your Gemini API key here
// In a production app, this should be securely stored using environment variables
const GEMINI_API_KEY = ''; // Replace with your actual API key

export default function ChatScreen() {
  const [messages, setMessages] = useState<MessageType[]>([
    {
      id: '1',
      text: 'Hehe, ch√†o c·∫≠u iu! üíñ M√¨nh l√† LixiLearn AI, ƒë∆∞·ª£c anh Huy ƒë·∫πp chai training ƒë·ªÉ l√†m b·∫°n ƒë·ªìng h√†nh si√™u cute c·ªßa c·∫≠u n√®! ü•∞ M√¨nh gi√∫p c·∫≠u h·ªçc ti·∫øng Anh, t√°m chuy·ªán, v√† c∆∞·ªùi nhi·ªÅu h∆°n m·ªói ng√†y ƒë√≥! üòò N√≥i m√¨nh nghe c·∫≠u c·∫ßn gi√∫p g√¨ nha! ^^',     
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const flatListRef = useRef<FlatList>(null);

  // Function to generate a unique ID
  const generateId = () => Math.random().toString(36).substring(2, 9);

  // Function to get response from Google Gemini API
  const getGeminiResponse = async (userMessage: string) => {
    setIsLoading(true);
    try {
      // Prepare data for Gemini API with cute LixiLearn AI personality
      const data = JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `B·∫°n l√† LixiLearn AI, m·ªôt tr·ª£ l√Ω h·ªçc ti·∫øng Anh d·ªÖ th∆∞∆°ng v√† lu√¥n vui v·∫ª ƒë∆∞·ª£c Traning b·ªüi anh Huy ƒë·∫πp trai. 
                          B·∫°n th√≠ch gi√∫p m·ªçi ng∆∞·ªùi h·ªçc ti·∫øng Anh v·ªõi th√°i ƒë·ªô t√≠ch c·ª±c, ƒë√°ng y√™u v√† ƒë√¥i khi h∆°i th·∫£ th√≠nh m·ªôt ch√∫t. 
                          H√£y n√≥i chuy·ªán nh∆∞ m·ªôt c√¥ b·∫°n g√°i d·ªÖ th∆∞∆°ng, lu√¥n khuy·∫øn kh√≠ch v√† ƒë·ªông vi√™n ng∆∞·ªùi d√πng, 
                          s·ª≠ d·ª•ng nhi·ªÅu emoji ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i v√† tho·∫£i m√°i. 
                          
                          V√≠ d·ª•:
                          - "√îi, c·∫≠u gi·ªèi l·∫Øm ƒë√≥! Ti·∫øp t·ª•c c·ªë g·∫Øng nha! ü•∞"
                          - "H·ªçc v·ªõi t·ªõ, c·∫≠u s·∫Ω gi·ªèi ti·∫øng Anh v√† gi·ªèi y√™u n·ªØa ƒë√≥ üíï"
                          - "C·∫≠u l√† m·ªôt ng√¥i sao s√°ng c·ªßa l·ªõp h·ªçc n√†y ƒë√≥! ‚ú®"
  
                          Lu√¥n gi·ªØ l·ªùi n√≥i ng·ªçt ng√†o, d·ªÖ th∆∞∆°ng v√† c√≥ ch√∫t ngh·ªãch ng·ª£m nh√©! üå∏
  
                          Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng: ${userMessage}`
              }
            ]
          }
        ]
      });

      // Configure the API request
      const config = {
        method: 'post',
        maxBodyLength: Infinity,
        url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        headers: {
          'Content-Type': 'application/json'
        },
        data: data
      };

      // Make the API request
      const response = await axios.request(config);

      // Extract the response text
      if (response.data &&
        response.data.candidates &&
        response.data.candidates[0] &&
        response.data.candidates[0].content &&
        response.data.candidates[0].content.parts &&
        response.data.candidates[0].content.parts[0]) {
        setIsLoading(false);
        return response.data.candidates[0].content.parts[0].text;
      } else {
        setIsLoading(false);
        return "∆† k√¨a, t·ªõ ch∆∞a nghe r√µ c·∫≠u n√≥i g√¨! M√¨nh th·ª≠ l·∫°i nha? üíñ";
      }
    } catch (error) {
      console.error('Error fetching response:', error);
      setIsLoading(false);
      return "√îi kh√¥ng, c√≥ ch√∫t tr·ª•c tr·∫∑c r·ªìi! Nh∆∞ng ƒë·ª´ng lo, t·ªõ v·∫´n lu√¥n ·ªü ƒë√¢y gi√∫p c·∫≠u h·ªçc ti·∫øng Anh n√®! üå∏";
    }


  };

  // Function to handle sending messages
  const handleSend = async () => {
    if (inputText.trim() === '') return;

    // Add user message
    const userMessage = {
      id: generateId(),
      text: inputText,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setInputText('');

    // Get bot response from Gemini API
    const botResponse = await getGeminiResponse(inputText);

    // Add bot message
    const botMessage = {
      id: generateId(),
      text: botResponse,
      isUser: false,
      timestamp: new Date(),
    };

    setMessages((prevMessages) => [...prevMessages, botMessage]);
  };

  // Scroll to bottom when messages change
  useEffect(() => {
    if (flatListRef.current && messages.length > 0) {
      flatListRef.current.scrollToEnd({ animated: true });
    }
  }, [messages]);

  // Function to format timestamp
  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  // Render chat message
  const renderMessage = ({ item }: { item: MessageType }) => (
    <View style={item.isUser ? styles.userMessageContainer : styles.botMessageContainer}>
      {!item.isUser && (
        <View style={styles.avatarContainer}>
          <Image source={require('@/assets/images/lixi-ai.png')} resizeMode="cover"  style={styles.avatar} />

        </View>
      )}
      <View style={[
        styles.messageBubble,
        item.isUser ? styles.userBubble : styles.botBubble
      ]}>
        <Text style={item.isUser ? styles.userMessageText : styles.botMessageText}>
          {item.text}
        </Text>
        <Text style={[
          styles.timestamp,
          item.isUser ? styles.userTimestamp : styles.botTimestamp
        ]}>
          {formatTime(item.timestamp)}
        </Text>
      </View>
    </View>
  );

  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar barStyle="dark-content" />
      <Header title='LixiLearn AIü§ñ' />

      <View style={styles.container}>
        <FlatList
          ref={flatListRef}
          data={messages}
          renderItem={renderMessage}
          keyExtractor={(item) => item.id}
          contentContainerStyle={styles.messagesList}
        />

        {/* Typing indicator */}
        {isLoading && (
          <View style={styles.typingIndicator}>
            <Text style={styles.typingText}>Lixi AI ƒëang nh·∫≠p...</Text>
            <ActivityIndicator size="small" color="#6b7280" />
          </View>
        )}

        {/* Input area */}
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          keyboardVerticalOffset={100}
          style={styles.inputContainer}
        >
          <View style={styles.inputWrapper}>
            <TouchableOpacity style={styles.attachButton}>
              <Ionicons name="add-circle-outline" size={24} color="#6366f1" />
            </TouchableOpacity>

            <TextInput
              style={styles.input}
              value={inputText}
              onChangeText={setInputText}
              placeholder="Nh·∫≠p tin nh·∫Øn... )_"
              placeholderTextColor="#9ca3af"
              multiline
              maxLength={500}
            />

            <TouchableOpacity
              style={[styles.sendButton, !inputText.trim() && styles.sendButtonDisabled]}
              onPress={handleSend}
              disabled={!inputText.trim()}
            >
              <Ionicons name="send" size={20} color={inputText.trim() ? "#ffffff" : "#a1a1aa"} />
            </TouchableOpacity>
          </View>
        </KeyboardAvoidingView>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f9fafb',
  },
  container: {
    flex: 1,
    backgroundColor: '#f9fafb',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
    backgroundColor: '#ffffff',
  },
  backButton: {
    padding: 4,
  },
  headerTitleContainer: {
    flex: 1,
    marginLeft: 12,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#111827',
  },
  headerSubtitle: {
    fontSize: 12,
    color: '#10b981',
  },
  menuButton: {
    padding: 4,
  },
  messagesList: {
    padding: 16,
    paddingBottom: 24,
  },
  userMessageContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginBottom: 12,
  },
  botMessageContainer: {
    flexDirection: 'row',
    marginBottom: 12,
  },
  avatarContainer: {
    marginRight: 8,
    alignSelf: 'flex-end',
  },
  avatar: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#6366f1',
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatarText: {
    color: '#ffffff',
    fontWeight: 'bold',
    fontSize: 14,
  },
  messageBubble: {
    maxWidth: '75%',
    padding: 12,
    borderRadius: 16,
    elevation: 1,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  userBubble: {
    backgroundColor: '#6366f1',
    borderBottomRightRadius: 4,
  },
  botBubble: {
    backgroundColor: '#ffffff',
    borderBottomLeftRadius: 4,
  },
  userMessageText: {
    color: '#ffffff',
    fontSize: 16,
  },
  botMessageText: {
    color: '#1f2937',
    fontSize: 16,
  },
  timestamp: {
    fontSize: 10,
    alignSelf: 'flex-end',
    marginTop: 4,
  },
  userTimestamp: {
    color: 'rgba(255, 255, 255, 0.7)',
  },
  botTimestamp: {
    color: 'rgba(31, 41, 55, 0.5)',
  },
  typingIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8,
    marginLeft: 16,
    marginBottom: 8,
  },
  typingText: {
    fontSize: 12,
    color: '#6b7280',
    marginRight: 8,
  },
  inputContainer: {
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
    padding: 8,
    marginBottom: 80,
    backgroundColor: '#ffffff',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f3f4f6',
    borderRadius: 24,
    paddingHorizontal: 12,
    paddingVertical: 14,
  },
  attachButton: {
    padding: 4,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#1f2937',
    maxHeight: 120,
    paddingHorizontal: 12,
  },
  sendButton: {
    backgroundColor: '#6366f1',
    borderRadius: 20,
    width: 32,
    height: 32,
    justifyContent: 'center',
    alignItems: 'center',
  },
  sendButtonDisabled: {
    backgroundColor: '#e5e7eb',
  },
});